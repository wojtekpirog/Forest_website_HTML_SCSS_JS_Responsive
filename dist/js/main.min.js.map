{"version":3,"sources":["main.js"],"names":["navbar","toggleButton","navbarLinksContainer","navbarLinks","overlay","navbarHeight","firstNameInput","lastNameInput","emailAddressInput","contactSelect","messageTextarea","charsCounter","resetButton","submitButton","footerYear","allSections","contactFormControls","popupContainer","closePopupButton","prepareDOMElements","document","querySelector","querySelectorAll","offsetHeight","addListeners","addEventListener","toggleNavbarMenu","closeNavbarMenu","window","innerWidth","handleScrollSpy","body","dataset","currentPage","handleTextarea","handleFormClear","handleFormSubmit","event","preventDefault","forEach","input","value","checkForm","checkEmailAddress","checkSelect","setTimeout","handlePopup","inputs","showError","concat","previousElementSibling","textContent","slice","clearError","test","innerHTML","length","maxLength","message","style","borderColor","parentElement","errorCount","errorBox","openPopup","closePopup","key","classList","add","setAttribute","remove","toggle","contains","activeSectionId","sections","section","scrollY","offsetTop","push","id","navbarLink","setInitialCharsCounter","setFooterYear","currentYear","Date","getFullYear"],"mappings":"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","file":"main.min.js","sourcesContent":["// Navbar\nlet navbar;\nlet toggleButton;\nlet navbarLinksContainer;\nlet navbarLinks;\n// Overlay\nlet overlay;\n// `offsetHeight` of navbar\nlet navbarHeight;\n// Contact form controls\nlet firstNameInput;\nlet lastNameInput;\nlet emailAddressInput;\nlet contactSelect;\nlet messageTextarea;\n// Chars counter\nlet charsCounter;\n// Contact form buttons\nlet resetButton;\nlet submitButton;\n// Footer\nlet footerYear;\n// All sections on the page that need to be spied on when scrolling\nlet allSections;\n// All input elements inside the contact form\nlet contactFormControls;\n// Popup\nlet popupContainer;\nlet closePopupButton;\n\nconst main = () => {\n  prepareDOMElements();\n  addListeners();\n  setFooterYear();\n  document.body.dataset.currentPage === \"contact\" ? setInitialCharsCounter() : false;\n}\n\nconst prepareDOMElements = () => {\n  navbar = document.querySelector(\".navbar\");\n  toggleButton = document.querySelector(\".navbar__burger-icon\");\n  navbarLinksContainer = document.querySelector(\".navbar__links\");\n  navbarLinks = document.querySelectorAll(\".navbar__link\");\n  // Overlay\n  overlay = document.querySelector(\".navbar__overlay\");\n  // Footer\n  footerYear = document.querySelector(\".footer__copyright-year\");\n  // Contact form controls\n  firstNameInput = document.querySelector(\"#first-name\");\n  lastNameInput = document.querySelector(\"#last-name\");\n  emailAddressInput = document.querySelector(\"#email\");\n  contactSelect = document.querySelector(\"#reason\");\n  messageTextarea = document.querySelector(\"#message\");\n  // Chars counter\n  charsCounter = document.querySelector(\".contact__form-counter\");\n  // Contact form buttons\n  resetButton = document.querySelector(\".contact__form-button--reset\");\n  submitButton = document.querySelector(\".contact__form-button--submit\");\n  // All sections on the page\n  allSections = document.querySelectorAll(\".page-section\");\n  // All input elements inside the contact form\n  contactFormControls = document.querySelectorAll(\".contact__form-input\");\n  // Popup container\n  popupContainer = document.querySelector(\".form-popup__container\");\n  closePopupButton = document.querySelector(\".form-popup__close-button\");\n\n  navbarHeight = navbar.offsetHeight;\n}\n\nconst addListeners = () => {\n  toggleButton.addEventListener(\"click\", toggleNavbarMenu);\n  overlay.addEventListener(\"click\", closeNavbarMenu);\n  \n  window.addEventListener(\"resize\", () => window.innerWidth >= 992 ? closeNavbarMenu() : false);\n  window.addEventListener(\"scroll\", handleScrollSpy);\n  \n  if (document.body.dataset.currentPage === \"contact\") {\n    messageTextarea.addEventListener(\"input\", handleTextarea);\n    resetButton.addEventListener(\"click\", handleFormClear);\n    submitButton.addEventListener(\"click\", handleFormSubmit);\n  }\n}\n\n// Form-related functions\n\nconst handleFormClear = (event) => {\n  event.preventDefault();\n\n  contactFormControls.forEach((input) => input.value = \"\");\n}\n\nconst handleFormSubmit = (event) => {\n  event.preventDefault();\n\n  checkForm([firstNameInput, lastNameInput, emailAddressInput, messageTextarea]);\n  checkEmailAddress(emailAddressInput);\n  checkSelect(contactSelect);\n  // Symulacja wysyłania formularza\n  setTimeout(handlePopup, 1000);\n}\n\nconst checkForm = (inputs) => {\n  inputs.forEach((input) => {\n    input.value === \"\" ? showError(input, `Pole \"${input.previousElementSibling.textContent.slice(0, -2)}\" nie może być puste`) : clearError(input);\n  });\n}\n\nconst checkEmailAddress = (emailAddressInput) => {\n  const regExp = /^[\\w\\.-]+@[a-zA-Z\\d\\.-]+\\.[a-zA-Z]{2,}$/;\n  \n  if (emailAddressInput.value === \"\") {\n    showError(emailAddressInput, 'Pole \"Adres e-mail\" nie może być puste');\n  } else if (!regExp.test(emailAddressInput.value)) {\n    showError(emailAddressInput, 'Adres e-mail jest nieprawidłowy');\n  } else {\n    clearError(emailAddressInput);\n  }\n}\n\nconst checkSelect = (contactSelect) => {\n  if (contactSelect.value === \"\") {\n    showError(contactSelect, \"Powiedz nam, w jakiej sprawie piszesz\");\n  } else {\n    clearError(contactSelect);\n  }\n}\n\nconst handleTextarea = () => {\n  charsCounter.innerHTML = `<p class=\"contact__form-counter\"><span>${messageTextarea.value.length}</span>/${messageTextarea.maxLength}</p>`;\n\n  if (messageTextarea.value.length === messageTextarea.maxLength) {\n    messageTextarea.value = messageTextarea.value.slice(0, messageTextarea.maxLength + 1);\n    showError(messageTextarea, `Osiągnięto limit ${messageTextarea.maxLength} znaków.`);\n  } else {\n    clearError(messageTextarea);\n  }\n}\n\nconst showError = (input, message) => {\n  input.style.borderColor = \"hsl(0, 100%, 40%)\";\n  input.parentElement.querySelector(\".contact__form-error\").textContent = message;\n}\n\nconst clearError = (input) => {\n  input.style.borderColor = \"hsl(0, 0%, 25%)\";\n  input.parentElement.querySelector(\".contact__form-error\").textContent = \"\";\n}\n\n// Popup-related functions\n\nconst handlePopup = () => {\n  let errorCount = 0;\n  \n  const errorsBoxes = document.querySelectorAll(\".contact__form-error\");\n  errorsBoxes.forEach((errorBox) => errorBox.textContent !== \"\" ? errorCount += 1 : false);\n\n  if (errorCount === 0) {\n    openPopup();\n  } else {\n    closePopup();\n  }\n\n  // Zamknij popup po naciśnięciu klawisza ESC\n  document.addEventListener(\"keydown\", (event) => {\n    if (event.key === \"Escape\" || event.key === \"Esc\") closePopup();\n  });\n}\n\nconst openPopup = () => {\n  popupContainer.classList.add(\"form-popup__container--active\");\n  popupContainer.setAttribute(\"aria-hidden\", false);\n  closePopupButton.addEventListener(\"click\", closePopup);\n}\n\nconst closePopup = () => {\n  popupContainer.classList.remove(\"form-popup__container--active\");\n  popupContainer.setAttribute(\"aria-hidden\", true);\n}\n\n// Navbar-related functions\n\nconst toggleNavbarMenu = () => {\n  toggleButton.classList.toggle(\"navbar__burger-icon--active\");\n  navbarLinksContainer.classList.toggle(\"navbar__links--active\");\n  overlay.classList.toggle(\"navbar__overlay--active\");\n\n  if (navbarLinksContainer.classList.contains(\"navbar__links--active\")) {\n    toggleButton.setAttribute(\"aria-expanded\", \"true\");\n    toggleButton.setAttribute(\"aria-label\", \"Zamknij menu nawigacyjne\");\n  } else {\n    toggleButton.setAttribute(\"aria-expanded\", \"false\");\n    toggleButton.setAttribute(\"aria-label\", \"Otwórz menu nawigacyjne\");\n  }\n}\n\nconst closeNavbarMenu = () => {\n  overlay.classList.remove(\"navbar__overlay--active\");\n  toggleButton.classList.remove(\"navbar__burger-icon--active\");\n  toggleButton.setAttribute(\"aria-expanded\", \"false\");\n  toggleButton.setAttribute(\"aria-label\", \"Otwórz menu nawigacyjne\");\n  navbarLinksContainer.classList.remove(\"navbar__links--active\");\n}\n\n// Scroll spy\n\nconst handleScrollSpy = () => {\n  // We want the scroll spy to work only on the main page:\n  if (document.body.dataset.currentPage === \"home\") {\n    const sections = []; // Sections for which `offsetHeight` + `offsetTop` - navbarHeight <= `window.scrollY`\n\n    allSections.forEach((section) => {\n      if (window.scrollY <= section.offsetHeight + section.offsetTop - navbarHeight) {\n        sections.push(section);\n      }\n    });\n\n    allSections.forEach((section) => section.classList.remove(\"page-section--active\"));\n    sections[0].classList.add(\"page-section--active\");\n\n    let activeSectionId;\n    allSections.forEach((section) => section.classList.contains(\"page-section--active\") && (activeSectionId = section.id));\n\n    navbarLinks.forEach((navbarLink) => navbarLink.classList.remove(\"navbar__link--active\"));\n    document.querySelector(`.navbar__link[href*=\"${activeSectionId}\"]`).classList.add(\"navbar__link--active\");\n  }\n}\n\nconst setInitialCharsCounter = () => {\n  charsCounter.innerHTML = `<span>${messageTextarea.value.length}</span>/${messageTextarea.maxLength}`;\n}\n\nconst setFooterYear = () => {\n  const currentYear = new Date().getFullYear();\n  footerYear.textContent = currentYear;\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", main);"]}